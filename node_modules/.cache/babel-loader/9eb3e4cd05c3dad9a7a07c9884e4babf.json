{"ast":null,"code":"var _jsxFileName = \"/home/viksingh/VISUALCODE/netflix-clone/src/components/Row.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from '../axios';\nimport YouTube from \"react-youtube\";\nimport '../Row.css';\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nconst Row = props => {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(props.fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [props.fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }\n  }, props.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }\n  }, movies.map((val, ind) => /*#__PURE__*/React.createElement(\"img\", {\n    key: val.id,\n    className: `row_poster ${props.isLargeRow && \"row_posterLarge\"}`,\n    src: `${base_url}${props.isLargeRow ? val.poster_path : val.poster_path}`,\n    alt: val.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(YouTube, {\n    videoId: trailerUrl,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }\n  }));\n};\n\nexport default Row;","map":{"version":3,"sources":["/home/viksingh/VISUALCODE/netflix-clone/src/components/Row.js"],"names":["React","useState","useEffect","axios","YouTube","base_url","Row","props","movies","setMovies","fetchData","request","get","fetchUrl","data","results","opts","height","width","playerVars","autoplay","title","map","val","ind","id","isLargeRow","poster_path","name","trailerUrl"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAO,YAAP;AAEA,MAAMC,QAAQ,GAAC,sCAAf;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAU;AAClB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeQ,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAE,MAAMR,KAAK,CAACS,GAAN,CAAUL,KAAK,CAACM,QAAhB,CAArB;AACAJ,MAAAA,SAAS,CAACE,OAAO,CAACG,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOJ,OAAP;AAEH;;AACDD,IAAAA,SAAS;AACV,GARQ,EAQP,CAACH,KAAK,CAACM,QAAP,CARO,CAAT;AAUA,QAAMG,IAAI,GAAC;AACTC,IAAAA,MAAM,EAAC,KADE;AAETC,IAAAA,KAAK,EAAC,MAFG;AAGTC,IAAAA,UAAU,EAAC;AACTC,MAAAA,QAAQ,EAAC;AADA;AAHF,GAAX;AASA,sBACK;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKb,KAAK,CAACc,KAAX,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQb,MAAM,CAACc,GAAP,CAAW,CAACC,GAAD,EAAKC,GAAL,kBACV;AACA,IAAA,GAAG,EAAED,GAAG,CAACE,EADT;AAEA,IAAA,SAAS,EAAG,cAAalB,KAAK,CAACmB,UAAN,IAAoB,iBAAkB,EAF/D;AAGA,IAAA,GAAG,EAAG,GAAErB,QAAS,GAAGE,KAAK,CAACmB,UAAN,GAAmBH,GAAG,CAACI,WAAvB,GAAoCJ,GAAG,CAACI,WAAY,EAHxE;AAIA,IAAA,GAAG,EAAEJ,GAAG,CAACK,IAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFR,CAFF,eAYE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEC,UAAlB;AAA8B,IAAA,IAAI,EAAEb,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADL;AAiBH,CAvCD;;AAwCA,eAAeV,GAAf","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport axios  from '../axios'\nimport YouTube from \"react-youtube\"\nimport '../Row.css'\n\nconst base_url=\"https://image.tmdb.org/t/p/original/\";\n\nconst Row = (props) =>{\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => {\n      async function fetchData(){\n          const request= await axios.get(props.fetchUrl);\n          setMovies(request.data.results);\n          return request;\n         \n      }\n      fetchData();\n    },[props.fetchUrl]);\n\n    const opts={\n      height:\"390\",\n      width:\"100%\",\n      playerVars:{\n        autoplay:1,\n      }\n    }\n   \n        \n    return(\n         <div className=\"row\">\n           <h2>{props.title}</h2>\n           <div className=\"row_posters\">\n               {\n                   movies.map((val,ind)=>(  \n                    <img \n                    key={val.id}\n                    className={`row_poster ${props.isLargeRow && \"row_posterLarge\"}`}\n                    src={`${base_url}${ props.isLargeRow ? val.poster_path :val.poster_path}`} \n                    alt={val.name} />     \n                   ))}\n           </div>\n           <YouTube videoId={trailerUrl} opts={opts} />\n         </div>\n      \n    )\n}\nexport default Row;"]},"metadata":{},"sourceType":"module"}