{"ast":null,"code":"var _jsxFileName = \"/home/viksingh/VISUALCODE/netflix-clone/src/components/Row.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from '../axios';\nimport YouTube from \"react-youtube\";\nimport movieTrailer from 'movie-trailer';\nimport '../Row.css';\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nconst Row = props => {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(props.fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [props.fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }\n  }, props.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }\n  }, movies.map((val, ind) => /*#__PURE__*/React.createElement(\"img\", {\n    key: val.id,\n    onClick: () => handleClick(movies),\n    className: `row_poster ${props.isLargeRow && \"row_posterLarge\"}`,\n    src: `${base_url}${props.isLargeRow ? val.poster_path : val.poster_path}`,\n    alt: val.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }))), trailerUrl && /*#__PURE__*/React.createElement(YouTube, {\n    videoId: trailerUrl,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 27\n    }\n  }));\n};\n\nexport default Row;","map":{"version":3,"sources":["/home/viksingh/VISUALCODE/netflix-clone/src/components/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","props","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","fetchUrl","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","title","map","val","ind","id","isLargeRow","poster_path"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAO,YAAP;AAEA,MAAMC,QAAQ,GAAC,sCAAf;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAU;AAClB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,UAAD,EAAYC,aAAZ,IAA6BX,QAAQ,CAAC,EAAD,CAA3C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeW,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAE,MAAMX,KAAK,CAACY,GAAN,CAAUP,KAAK,CAACQ,QAAhB,CAArB;AACAN,MAAAA,SAAS,CAACI,OAAO,CAACG,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOJ,OAAP;AAEH;;AACDD,IAAAA,SAAS;AACV,GARQ,EAQP,CAACL,KAAK,CAACQ,QAAP,CARO,CAAT;AAUA,QAAMG,IAAI,GAAC;AACTC,IAAAA,MAAM,EAAC,KADE;AAETC,IAAAA,KAAK,EAAC,MAFG;AAGTC,IAAAA,UAAU,EAAC;AACTC,MAAAA,QAAQ,EAAC;AADA;AAHF,GAAX;;AAOA,QAAMC,WAAW,GAAGC,KAAD,IAAS;AAC1B,QAAGd,UAAH,EAAc;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AAED,KAHD,MAGK;AACHP,MAAAA,YAAY,CAAC,CAAAoB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACMC,GAAG,IAAG;AACV,cAAMC,SAAS,GAAC,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAhB;AACApB,QAAAA,aAAa,CAACiB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb;AAED,OALD,EAKGkB,KALH,CAKUC,KAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CALlB;AAMD;AAGF,GAdD;;AAiBA,sBACK;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK1B,KAAK,CAAC6B,KAAX,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ5B,MAAM,CAAC6B,GAAP,CAAW,CAACC,GAAD,EAAKC,GAAL,kBACV;AACA,IAAA,GAAG,EAAED,GAAG,CAACE,EADT;AAEA,IAAA,OAAO,EAAE,MAAIjB,WAAW,CAACf,MAAD,CAFxB;AAGA,IAAA,SAAS,EAAG,cAAaD,KAAK,CAACkC,UAAN,IAAoB,iBAAkB,EAH/D;AAIA,IAAA,GAAG,EAAG,GAAEpC,QAAS,GAAGE,KAAK,CAACkC,UAAN,GAAmBH,GAAG,CAACI,WAAvB,GAAoCJ,GAAG,CAACI,WAAY,EAJxE;AAKA,IAAA,GAAG,EAAEJ,GAAG,CAACb,IALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFR,CAFF,EAaGf,UAAU,iBAAI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,UAAlB;AAA8B,IAAA,IAAI,EAAEQ,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbjB,CADL;AAkBH,CAxDD;;AAyDA,eAAeZ,GAAf","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport axios  from '../axios'\nimport YouTube from \"react-youtube\"\nimport movieTrailer from 'movie-trailer'\nimport '../Row.css'\n\nconst base_url=\"https://image.tmdb.org/t/p/original/\";\n\nconst Row = (props) =>{\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl,setTrailerUrl] = useState(\"\")\n\n    useEffect(() => {\n      async function fetchData(){\n          const request= await axios.get(props.fetchUrl);\n          setMovies(request.data.results);\n          return request;\n         \n      }\n      fetchData();\n    },[props.fetchUrl]);\n\n    const opts={\n      height:\"390\",\n      width:\"100%\",\n      playerVars:{\n        autoplay:1,\n      }\n    }\n    const handleClick =(movie)=>{\n      if(trailerUrl){\n        setTrailerUrl('');\n\n      }else{\n        movieTrailer(movie?.name || \"\")\n        .then(url =>{\n          const urlParams=new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n\n        }).catch((error)=>console.log(error))\n      }\n\n\n    }\n   \n        \n    return(\n         <div className=\"row\">\n           <h2>{props.title}</h2>\n           <div className=\"row_posters\">\n               {\n                   movies.map((val,ind)=>(  \n                    <img \n                    key={val.id}\n                    onClick={()=>handleClick(movies)}\n                    className={`row_poster ${props.isLargeRow && \"row_posterLarge\"}`}\n                    src={`${base_url}${ props.isLargeRow ? val.poster_path :val.poster_path}`} \n                    alt={val.name} />     \n                   ))}\n           </div>\n           {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n         </div>\n      \n    )\n}\nexport default Row;"]},"metadata":{},"sourceType":"module"}